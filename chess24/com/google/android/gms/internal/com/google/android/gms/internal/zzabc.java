/*
 * Decompiled with CFR 0_134.
 */
package com.google.android.gms.internal;

import android.support.annotation.NonNull;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.TransformedResult;
import com.google.android.gms.internal.zzzx;
import java.util.concurrent.TimeUnit;

public final class zzabc<R extends Result>
extends OptionalPendingResult<R> {
    private final zzzx<R> zzaBC;

    public zzabc(PendingResult<R> pendingResult) {
        if (!(pendingResult instanceof zzzx)) {
            throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
        }
        this.zzaBC = (zzzx)pendingResult;
    }

    @Override
    public R await() {
        return this.zzaBC.await();
    }

    @Override
    public R await(long l, TimeUnit timeUnit) {
        return this.zzaBC.await(l, timeUnit);
    }

    @Override
    public void cancel() {
        this.zzaBC.cancel();
    }

    @Override
    public R get() {
        if (this.isDone()) {
            return this.await(0L, TimeUnit.MILLISECONDS);
        }
        throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
    }

    @Override
    public boolean isCanceled() {
        return this.zzaBC.isCanceled();
    }

    @Override
    public boolean isDone() {
        return this.zzaBC.isReady();
    }

    @Override
    public void setResultCallback(ResultCallback<? super R> resultCallback) {
        this.zzaBC.setResultCallback(resultCallback);
    }

    @Override
    public void setResultCallback(ResultCallback<? super R> resultCallback, long l, TimeUnit timeUnit) {
        this.zzaBC.setResultCallback(resultCallback, l, timeUnit);
    }

    @NonNull
    @Override
    public <S extends Result> TransformedResult<S> then(@NonNull ResultTransform<? super R, ? extends S> resultTransform) {
        return this.zzaBC.then(resultTransform);
    }

    @Override
    public void zza(PendingResult.zza zza2) {
        this.zzaBC.zza(zza2);
    }

    @Override
    public Integer zzuR() {
        return this.zzaBC.zzuR();
    }
}
